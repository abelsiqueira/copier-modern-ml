# {{ project_name }}

{{ description }}


# Project Organization

```
{{ project_slug }}/
├── LICENSE                     # Open-source license if one is chosen
├── README.md                   # The top-level README for developers using this project.
├── mkdocs.yml                  # mkdocs-material configuration file.
├── pyproject.toml              # Project configuration file with package metadata for
│                                   {{ project_slug }} and configuration for tools like ruff
├── requirements.lock           # The requirements lock file for reproducing the production environment, e.g.
│                                   generated with `rye sync`
├── requirements-dev.lock       # The requirements lock file for reproducing the development environment, e.g.
│                                   generated with `rye sync`
├── configs                     # Config files (models and training hyperparameters)
│   └── model1.yaml              
│
├── data                         
│   ├── external                # Data from third party sources.
│   ├── interim                 # Intermediate data that has been transformed.
│   ├── processed               # The final, canonical data sets for modeling.
│   └── raw                     # The original, immutable data dump.
│
├── docs                        # Project documentation.
│
├── models                      # Trained and serialized models.
│
├── notebooks                   # Jupyter notebooks.
│
├── references                  # Data dictionaries, manuals, and all other explanatory materials.
│
├── reports                     # Generated analysis as HTML, PDF, LaTeX, etc.
│   └── figures                 # Generated graphics and figures to be used in reporting.
│
├── pyproject.toml              # The pyproject.toml file for reproducing the analysis environment.
├── src/tests                   # Unit test files.
│
└── src/{{ project_slug }}      # Source code for use in this project.
    │
    ├── __init__.py             # Makes {{ project_slug }} a Python module
    │
    ├── cli.py                  # Default CLI program
    │
    ├── data                    # Data engineering scripts.
    │
    ├── models                  # ML model engineering (a folder for each model).
    │
    └── visualization           # Scripts to create exploratory and results oriented visualizations.
```

# For Developers

## Decide to use virtual project
Virtual projects are projects which are themselves not installable Python packages, but that will sync their dependencies. They are declared like a normal python package in a pyproject.toml, but they do not create a package. [ref. rye docs](https://rye.astral.sh/guide/virtual/)

* Set `tool.rye.virtual` key to `true` in `pyproject.toml`. [ref: rye docs](https://rye.astral.sh/guide/pyproject/#toolryevirtual)


## Init package
### Setup Python version
```
rye pin 3.12
```

### [First Sync](https://rye.astral.sh/guide/basics/#first-sync)
```
rye sync
```

## Install Packages
### Install packages
```
rye sync --no-dev
```

### Install dev packages
```
rye sync
```

## Testing
### Run tests
```
rye run pytest
```

## Development
### Linting
```
rye lint --fix
```

### Formatting
```
rye fmt
```

### Run pre-commit
```
rye run pre-commit run --all-files
```

### Build package
```
rye build
```

## Documentation

### Serve Document
```
rye run mkdocs serve
```

### Build Document
```
rye run mkdocs build
```

## Container
### Build Docker Image (from source)

[ref. rye docs](https://rye.astral.sh/guide/docker/#container-from-source)

```
docker build -t TAGNAME .
```

### Build Docker Image (from package)

[ref. rye docs](https://rye.astral.sh/guide/docker/#container-from-a-python-package)

```
rye build --wheel --clean
docker build -t TAGNAME .
```

### Run Docker Container
```
docker run --gpus all -p 8000:8000 my-production-app
```

# References
* [Packaging Python Projects](https://packaging.python.org/tutorials/packaging-projects/)
* [Python Packaging User Guide](https://packaging.python.org/)
